import bcrypt from "bcryptjs";
import { PrismaClient, Role } from "@prisma/client";

const prisma = new PrismaClient();

// Function to hash a password
async function hashPassword(password: string): Promise<string> {
  const salt = await bcrypt.genSalt(10); // Generate salt with 10 rounds
  const hashedPassword = await bcrypt.hash(password, salt);
  return hashedPassword;
}

// Function to create a user with a hashed password
async function createUser(
  email: string,
  name: string,
  password: string,
  role: Role,
): Promise<void> {
  const hashedPassword = await hashPassword(password);

  const user = await prisma.users.create({
    data: {
      email,
      name,
      password: hashedPassword,
      role,
    },
  });
  console.log("User created:", user);
}

// Function to verify a user's password during login
async function verifyPassword(
  userSubmittedPassword: string,
  storedHashedPassword: string,
): Promise<boolean> {
  return await bcrypt.compare(userSubmittedPassword, storedHashedPassword);
}
// isn't being used but keep it for now
