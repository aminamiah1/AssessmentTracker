generator client {
  provider = "prisma-client-js"
}

generator erd {
  provider = "prisma-erd-generator"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL_OLD")
}

model Account {
  id                String  @id @default(cuid())
  userId            Int     @map("user_id")
  type              String
  provider          String
  providerAccountId String  @map("provider_account_id")
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
  user              Users   @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@map("accounts")
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique @map("session_token")
  userId       Int      @map("user_id")
  expires      DateTime
  user         Users    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("sessions")
}

model Users {
  id       Int       @id @default(autoincrement())
  email    String    @unique
  name     String
  password String
  roles    Role[]
  image    String?
  accounts Account[]
  sessions Session[]

  @@map("users")
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
  @@map("verificationtokens")
}

model Module {
  id             Int              @id @default(autoincrement())
  module_name    String
  module_code    String           @unique
  assessments    Assessment[]
  ModulesToUsers ModulesToUsers[]
}

model Assessment {
  id                 Int                  @id @default(autoincrement())
  assessment_name    String
  assessment_type    String
  hand_out_week      DateTime
  hand_in_week       DateTime
  module_id          Int
  setter_id          Int?
  module             Module               @relation(fields: [module_id], references: [id])
  Response           Response[]
  AssessmentsToUsers AssessmentsToUsers[]
  part               Part[]               @relation("AssessmentToPart")
}

model Part {
  id          Int          @id @default(autoincrement())
  part_title  String
  part_number Int
  Question    Question[]
  Assessment  Assessment[] @relation("AssessmentToPart")
}

model Question {
  id             Int        @id @default(autoincrement())
  question_title String
  part_id        Int
  Part           Part       @relation(fields: [part_id], references: [id])
  Response       Response[]
}

model Response {
  id            Int        @id @default(autoincrement())
  value         String
  data_type     Data_type
  assessment_id Int
  question_id   Int
  Assessment    Assessment @relation(fields: [assessment_id], references: [id])
  Question      Question   @relation(fields: [question_id], references: [id])
}

model AssessmentsToUsers {
  A          Int
  B          Int
  Assessment Assessment @relation(fields: [A], references: [id], onDelete: Cascade)

  @@unique([A, B], map: "_AssessmentsToUsers_AB_unique")
  @@index([B], map: "_AssessmentsToUsers_B_index")
  @@map("_AssessmentsToUsers")
}

model ModulesToUsers {
  A      Int
  B      Int
  Module Module @relation(fields: [A], references: [id], onDelete: Cascade)

  @@unique([A, B], map: "_ModulesToUsers_AB_unique")
  @@index([B], map: "_ModulesToUsers_B_index")
  @@map("_ModulesToUsers")
}

enum Role {
  ps_team
  module_leader
  internal_moderator
  panel_member
  external_examiner
  system_admin
}

enum Data_type {
  boolean
  string
  integer
  date_time
}
