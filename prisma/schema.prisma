generator client {
  provider = "prisma-client-js"
  seed     = "prisma/seed.ts"
}

generator erd {
  provider = "prisma-erd-generator"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Users {
  id              Int              @id @default(autoincrement())
  email           String           @unique
  name            String
  password        String
  roles           Role[]
  image           String?
  set_assessments Assessment[]
  assessments     Assessment[]     @relation("AssessmentsToUsers")
  modules         Module[]         @relation("ModulesToUsers")
  PartSubmission  PartSubmission[]
  status          UserStatus       @default(active)

  @@map("users")
}

model Module {
  id             Int          @id @default(autoincrement())
  module_name    String
  module_code    String       @unique
  assessments    Assessment[]
  module_leaders Users[]      @relation("ModulesToUsers")
  status         ModuleStatus @default(active)
}

model Assessment {
  id              Int              @id @default(autoincrement())
  assessment_name String
  assessment_type Assessment_type @default(Portfolio)
  hand_out_week   DateTime
  hand_in_week    DateTime
  module_id       Int
  setter_id       Int?
  module          Module           @relation(fields: [module_id], references: [id], onDelete: Cascade)
  setter          Users?           @relation(fields: [setter_id], references: [id], onDelete: Cascade)
  partSubmissions PartSubmission[]
  Response        Response[]
  assignees       Users[]          @relation("AssessmentsToUsers")
  proforma_link   String?          @unique
  // Declare the composite unique key to stop duplicate assessment details being submitted through csv

  @@unique([assessment_name, module_id, hand_out_week, hand_in_week])
}

// 'PartSubmission' is for keeping track of when parts have been submitted;
// individual questions can be answered (i.e. Responses), but the part won't
// be marked as submitted until they press the 'Submit' button - this will allow
// the user to come back to the part and make changes before submitting
model PartSubmission {
  date_submitted DateTime @default(now())

  assessment_id Int
  Assessment    Assessment @relation(fields: [assessment_id], references: [id])

  part_id Int
  Part    Part @relation(fields: [part_id], references: [id])

  submitted_by Int
  Submitter    Users @relation(fields: [submitted_by], references: [id])

  @@id([part_id, assessment_id])
}

model Part {
  id          Int    @id @default(autoincrement())
  part_title  String
  part_number Int
  role        Role

  next_part_id  Int?
  next_part     Part?  @relation("NextPart", fields: [next_part_id], references: [id])
  previous_part Part[] @relation("NextPart")

  Question       Question[]
  PartSubmission PartSubmission[]
}

model Question {
  id             Int        @id @default(autoincrement())
  question_title String
  response_type  Data_type
  part_id        Int
  choices        String[]
  Part           Part       @relation(fields: [part_id], references: [id])
  Response       Response[]
}

model Response {
  date_completed DateTime @default(now())
  value          String

  assessment_id Int
  Assessment    Assessment @relation(fields: [assessment_id], references: [id], onDelete: Cascade)

  question_id Int
  Question    Question @relation(fields: [question_id], references: [id])

  // Create a compound primary key - we don't want to allow the same question
  // to be answered twice for a single assessment
  @@id([assessment_id, question_id])
}

enum Role {
  ps_team
  module_leader
  internal_moderator
  panel_member
  external_examiner
  system_admin
}

enum Data_type {
  boolean
  string
}

enum Assessment_type {
  Written_Assessment
  Practical_Based_Assessment
  Class_Test
  Portfolio
  Exam_Online
}

enum ModuleStatus {
  active
  archived
  completed
}

enum UserStatus {
  active
  inactive
}
