stages:
  - build
  - cleanup
  - test
  - prepare-deploy
  - deploy

variables:
  # For testing
  DISABLE_ERD: "true"
  # Don't need password to connect to CI postgres service; trust auth is enabled
  DATABASE_URL: postgres://postgres@postgres/$POSTGRES_DB
  NEXTAUTH_URL: $NEXTAUTH_URL
  NEXTAUTH_SECRET: $NEXTAUTH_SECRET
  SENDGRID_API_KEY: $SENDGRID_API_KEY
  EMAIL_FROM: $EMAIL_FROM

  # For image building
  CI_COMMIT_LABEL: $CI_COMMIT_REF_SLUG-$CI_COMMIT_SHORT_SHA
  PROD_TAG: $CI_COMMIT_REF_SLUG-$CI_COMMIT_SHORT_SHA
  PROD_CONFIG_NAME: prod-generated-$PROD_TAG
  STAGING_CONFIG_NAME: staging-generated-$CI_COMMIT_LABEL

###############
# JOB ANCHORS #
###############

.do-openshift-login: &do-openshift-login
  - oc login --token=$OPENSHIFT_TOKEN --server=$OPENSHIFT_API_URL --insecure-skip-tls-verify=true
  - oc project $OPENSHIFT_PROJECT
  - oc version

.use-openshift: &use-openshift
  only:
    - main
    - /^release-\d+$/
  image: openshift/origin-cli
  before_script: # will allow for concatenation with script in the job
    - *do-openshift-login

.use-postgres:
  services: &use-postgres
    - name: postgres:12.18
      alias: postgres
      variables:
        POSTGRES_DB: $POSTGRES_DB
        POSTGRES_USER: postgres
        POSTGRES_PASSWORD: $POSTGRES_PASSWORD
        POSTGRES_HOST_AUTH_METHOD: trust

.set-up-app-environment: &set-up-app-environment
  - echo "Creating $CI_JOB_STAGE database..."
  - psql -h postgres -U postgres -c "CREATE DATABASE $POSTGRES_DB;"
  - echo "Setting up app environment..."
  - npm ci
  - npx prisma generate
  - npx prisma db push
  - npm i -g dotenv-cli ts-node

################
# BUILD STAGES #
################

build-image:
  <<: *use-openshift
  stage: build
  needs: [] # Run immediately, don't wait for other jobs
  script:
    # Create a new build configuration for the application for production or staging,
    # depending on what branch we're on:
    # - If the branch is 'main', create a production build
    # - If the branch is 'release-*', create a staging build
    #
    # The build configuration is created from a template file, and the template file
    # is parameterized with the commit label (descriptive) and SHA (unique identifier).
    #
    # Templating has been used because we want to keep a history of images with different
    # tags, and this templating allows us to create a new build configuration for each
    # new commit, and then delete it after the build is complete.
    #
    # This job will follow along with the OpenShift build, and fail if the build fails.
    - >
      if [ "$CI_COMMIT_REF_NAME" = "main" ]; then
        echo "Building production...";
        oc process build-config-prod \
          -p CI_COMMIT_LABEL=$PROD_TAG \
          -p CI_DATABASE_URL_LIVE=$DATABASE_URL_PROD \
          -p CI_DATABASE_URL_BUILD=${DATABASE_URL_PROD}?schema=$CI_COMMIT_SHORT_SHA \
          -p CI_NEXTAUTH_URL=$NEXTAUTHPROD_URL \
          -p CI_NEXTAUTH_SECRET=$NEXTAUTH_SECRET \
          -P SENDGRID_API_KEY=$SENDGRID_API_KEY \
          -P EMAIL_FROM=$EMAIL_FROM \
          -l name=build-$CI_COMMIT_SHORT_SHA | oc create -f -;
        oc start-build $PROD_CONFIG_NAME --follow --wait;

      elif [[ "$CI_COMMIT_REF_NAME" == "release"* ]]; then
        echo "Building staging image from branch $CI_COMMIT_REF_NAME...";
        oc process build-config-staging \
          -p CI_COMMIT_LABEL=$CI_COMMIT_LABEL \
          -p CI_COMMIT_SHA=$CI_COMMIT_SHA \
          -p CI_DATABASE_URL_LIVE=$DATABASE_URL_STAGING \
          -p CI_DATABASE_URL_BUILD=${DATABASE_URL_STAGING}?schema=$CI_COMMIT_SHORT_SHA \
          -p CI_NEXTAUTH_URL=$NEXTAUTHSTAGING_URL \
          -p CI_NEXTAUTH_SECRET=$NEXTAUTH_SECRET \
          -P SENDGRID_API_KEY=$SENDGRID_API_KEY \
          -P EMAIL_FROM=$EMAIL_FROM \
          -l name=build-$CI_COMMIT_LABEL | oc create -f -;
        oc start-build $STAGING_CONFIG_NAME --follow --wait;
      fi

# We want to run this regardless - this is the actual build that testing
# will be performed on.  It should be the same as the production build:
# - Same base image
# - Same environment variables being used (different values, but same keys)
# - Same build process
build-test-bundle:
  stage: build
  image: node:20.11.0-alpine3.18
  services: *use-postgres
  artifacts:
    paths:
      - .next/
    when: on_success
    expire_in: "30 days"
  needs: [] # Run immediately, don't wait for other jobs
  before_script:
    - echo "Installing postgresql client"
    - apk update && apk add postgresql-client
  script:
    - *set-up-app-environment
    - npm run build

###############
# CLEANUP JOB #
###############

# Need to include this so that a cleanup job can occur
# after the build job has completed or failed
clean-up-builds:
  <<: *use-openshift
  stage: cleanup
  when: always
  needs:
    - build-image
  script:
    - >
      if [ "$CI_COMMIT_REF_NAME" = "main" ]; then
        echo "Cleaning up production build...";
        oc delete buildconfig $PROD_CONFIG_NAME;
      elif [[ "$CI_COMMIT_REF_NAME" == "release"* ]]; then
        echo "Cleaning up staging build...";
        oc delete buildconfig $STAGING_CONFIG_NAME;
      fi

###############
# TEST STAGES #
###############
test-component:
  stage: test
  image: cypress/base:20.11.0
  artifacts:
    paths:
      - cypress/screenshots
    when: on_failure
    expire_in: "90 days"
  dependencies:
    - build-test-bundle
  script:
    - npm ci
    - npm run test:component

test-e2e:
  stage: test
  image: cypress/base:20.11.0
  services: *use-postgres
  artifacts:
    paths:
      # we want to store any screenshots created from failed tests
      # so debugging can be made a little easier if the test failures
      # are not reproducible in local environments :)
      - cypress/screenshots
    when: on_failure
    expire_in: "90 days"
  dependencies:
    - build-test-bundle
  before_script:
    - echo "Installing postgresql client"
    - apt-get update && apt-get install -y postgresql-client
  script:
    - *set-up-app-environment
    - npm run start:test &
    - npm run test:e2e:ci

##########################
# DEPLOYMENT PREPARATION #
##########################

# We want to create a backup of the database before deploying
# to production or staging. This is so that we can rollback to
# a previous state if something goes wrong with the deployment.
.use-openshift-backup: &use-openshift-backup
  <<: *use-openshift
  stage: prepare-deploy
  needs:
    - test-e2e
    - test-component
  artifacts:
    paths:
      - postgres-data
    when: on_success
    expire_in: "30 days"
  variables:
    HOST_DIR: /var/lib/pgsql/backups
    LOCAL_DIR: ./postgres-data
  script:
    # Ensure the backups directory exists
    - oc exec $POD_NAME -- mkdir -p $HOST_DIR
    # Create the actual backup
    - oc exec $POD_NAME -- pg_basebackup -h localhost -U postgres -D $HOST_DIR/$CI_COMMIT_SHA -Ft -z -P -Xs -v

    # Create the local directory to store the backup in GitLab
    - mkdir -p $LOCAL_DIR
    # Download the backup from the pod
    - oc rsync --progress $POD_NAME:$HOST_DIR/$CI_COMMIT_SHA $LOCAL_DIR

create-prod-db-backup:
  <<: *use-openshift-backup
  only:
    - main
  before_script:
    - *do-openshift-login
    # Need to extract the pod name from the postgres service;
    # rsync works by pod name, not service name
    - PODS=$(oc get pods -l name=prod-db | grep "Running")
    - echo "$PODS"
    - POD_REGEX="(prod-db[^ ]+)"
    - if [[ $PODS =~ $POD_REGEX ]]; then export POD_NAME="${BASH_REMATCH[1]}"; fi
    - echo "$POD_NAME"

create-staging-db-backup:
  <<: *use-openshift-backup
  only:
    - /^release-\d+$/
  before_script:
    - *do-openshift-login
    - PODS=$(oc get pods -l name=staging-db | grep "Running")
    - echo "$PODS"
    - POD_REGEX="(staging-db[^ ]+)"
    - if [[ $PODS =~ $POD_REGEX ]]; then export POD_NAME="${BASH_REMATCH[1]}"; fi
    - echo "$POD_NAME"

#-----------------------------------------#

.update-tag-template: &update-tag-template
  stage: prepare-deploy
  image: alpine:3.19
  needs:
    - test-e2e
    - test-component
  before_script:
    - apk add skopeo
    - skopeo login -u $REGISTRY_USERNAME -p $REGISTRY_PASSWORD --tls-verify=false -v $REGISTRY_HOST

update-prod-tag:
  <<: *update-tag-template
  only:
    - main
  script:
    - echo "Updating tags for production...";
    - skopeo copy docker://$REGISTRY_HOST/$REGISTRY_PATH/prod:$PROD_TAG docker://$REGISTRY_HOST/$REGISTRY_PATH/prod:stable;

update-staging-tag:
  <<: *update-tag-template
  only:
    - /^release-\d+$/
  script:
    - echo "Updating tags for staging...";
    - skopeo copy docker://$REGISTRY_HOST/$REGISTRY_PATH/staging:$CI_COMMIT_LABEL docker://$REGISTRY_HOST/$REGISTRY_PATH/staging:latest;

################
# DEPLOY STAGE #
################

deploy-prod-openshift:
  <<: *use-openshift
  stage: deploy
  needs:
    - create-prod-db-backup
    - update-prod-tag
  only:
    - main
  script:
    - echo "Deploying production...";
    - oc rollout latest dc/prod-app;

deploy-staging-openshift:
  <<: *use-openshift
  stage: deploy
  needs:
    - create-staging-db-backup
    - update-staging-tag
  only:
    - /^release-\d+$/
  script:
    - echo "Deploying staging...";
    - oc rollout latest dc/staging-app;
